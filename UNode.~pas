{ Модуль с описанием узла дерева }
unit UNode;

interface

uses
  ComCtrls, SysUtils, Math;

const
  { Минимально возможный элемент }
  MinElem = 0;
  { Максимально возможный элемент }
  MaxElem = 100;

type
  { Тип Элемент дерева }
  TElem = MinElem..MaxElem;
  { Тип "Указатель на узел дерева"}
  TPtr = ^TNode;
  { Класс Узел дерева }
  TNode = class
  private
    { Информационная часть }
    FInf: TElem;
    { Указатели на левое и правое поддеревья }
    FLeft, FRight: TNode;
  public
    { Создание узла дерева }
    constructor Create(el : TElem = MinElem);
    { Разрушение узла дерева }
    destructor Destroy; override;
    { Построить рандомно }
    constructor BuildRandom(n: integer);
    { Обход дерева }
    procedure View(TV:TTreeView; ParentNode: TTreeNode);
    // Поиск элемента el в дереве
    function CountNumber(el: TElem): integer;

    property Info : Telem read FInf;
    property Left : TNode read FLeft write FLeft;
    property Right : TNode read FRight write FRight;
  end;

implementation

{ Создание узла дерева }
constructor TNode.Create(el:TElem = MinElem);
begin
  inherited Create;
  FInf:= el;
  FLeft:= nil;
  FRight:= nil;
end;

{ Разрушение узла дерева }
destructor TNode.Destroy;
begin
  FreeAndNil(FLeft);
  FreeAndNil(FRight);
end;

{ Построить рандомно }
constructor TNode.BuildRandom(n: integer);
var
  nl: integer;
begin
  Create(Random(10));
  n:= n - 1;
  if n>0 then
    begin
      nl:= Random(n+1);
      if nl>0 then
        FLeft:= TNode.BuildRandom(nl);
      nl:=n - nl;
      if nl>0 then
        FRight:= TNode.BuildRandom(nl);
    end;
end;

{ Обход дерева }
procedure TNode.View(TV: TTreeView; ParentNode: TTreeNode);
 var node: TTreeNode;
begin
  if Self = nil then
    TV.Items.AddChild(ParentNode, 'x')
  else
    begin
      node:= TV.Items.AddChild(ParentNode, IntToStr(FInf));
      if (FLeft<>nil) or(FRight<>nil) then
        begin
          FLeft.View(TV, node);
          FRight.View(TV, node);
        end;
    end;
end;

// Поиск элемента el в дереве
function TNode.CountNumber(el: TElem): integer;
begin
  if self = nil then
    Result:=0
  else
    begin
      Result:=ord(self.FInf = el);
      if Fleft<>nil then
        Result:=Result+FLeft.CountNumber(el);
      if Fright<>nil then
        Result:=Result+FRight.CountNumber(el);
    end;
end;

end.

